{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItems","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yOAeeA,EAXF,SAAC,GACV,OADqB,EAAVC,MAEP,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,UAClC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,UAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,Y,+DCD9BC,EAAY,IAAIC,MAAM,GAAGC,KAAK,SAqHrBC,EAnHH,WAAO,IAAD,EAEeC,oBAAS,GAFxB,mBAERC,EAFQ,KAECC,EAFD,OAGqBF,mBAAS,IAH9B,mBAGRG,EAHQ,KAGIC,EAHJ,KA+DTC,EAAc,SAACC,GAChB,OAAGH,EACQI,YAAMJ,EAAY,CAACK,KAAM,YAGT,UAAxBZ,EAAUU,GAKFC,YAAM,iBAAkB,CAACC,KAAM,WAJtCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QAzDhBL,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,SAEI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,YAmBnB,OAEI,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACE,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,CAAKhB,UAAU,MAAf,SACI,eAACiB,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UACKQ,EACG,sBAAKR,UAAU,YAAf,UACI,oBAAIA,UAAU,8CAAd,SACKQ,IAEL,cAACW,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,QApFhC,WACdf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,IAiFX,gCAKJ,qBAAIH,UAAU,2BAAd,UACKM,EAAU,QAAU,SADzB,YAIJ,qBAAKN,UAAU,YAAf,SAEKC,EAAUsB,KAAI,SAACC,EAAMC,GAAP,OACX,cAACC,EAAA,EAAD,CAAMN,MAAM,UAAUE,QAAS,kBAAMZ,EAAYe,IAAjD,SACI,cAACE,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACI,cAAC,EAAD,CAAMD,KAAMyB,sBCvG7BI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.e2138328.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\n\r\n\r\nconst Icon = ({name}) => {\r\n    switch (name) {\r\n        case \"circle\":\r\n            return <FaRegCircle className=\"icons\"/>\r\n        case \"cross\":\r\n            return <FaTimes className=\"icons\"/>\r\n        default:\r\n            return <FaPen className=\"icons\"/>\r\n    }\r\n};\r\n\r\nexport default Icon;","import React, {useState} from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Icon from './components/Icon'\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody, Container, Button, Col, Row} from 'reactstrap'\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n\n   const [isCross, setIsCross] = useState(false) \n   const [winMessage, setWinMessage] = useState(\"\")\n\n   const reloadGame = () => {\n        setIsCross(false);\n        setWinMessage(\"\");\n        itemArray.fill(\"empty\", 0, 9)\n   }\n\n   const checkIsWinners = () => {\n    if (\n        itemArray[0] === itemArray[1] &&\n        itemArray[0] === itemArray[2] &&\n        itemArray[0] !== \"empty\"\n      ) {\n        setWinMessage(`${itemArray[0]} won`);\n      } else if (\n        itemArray[3] !== \"empty\" &&\n        itemArray[3] === itemArray[4] &&\n        itemArray[4] === itemArray[5]\n      ) {\n        setWinMessage(`${itemArray[3]} won`);\n      } else if (\n        itemArray[6] !== \"empty\" &&\n        itemArray[6] === itemArray[7] &&\n        itemArray[7] === itemArray[8]\n      ) {\n        setWinMessage(`${itemArray[6]} won`);\n      } else if (\n        itemArray[0] !== \"empty\" &&\n        itemArray[0] === itemArray[3] &&\n        itemArray[3] === itemArray[6]\n      ) {\n        setWinMessage(`${itemArray[0]} won`);\n      } else if (\n        itemArray[1] !== \"empty\" &&\n        itemArray[1] === itemArray[4] &&\n        itemArray[4] === itemArray[7]\n      ) {\n        setWinMessage(`${itemArray[1]} won`);\n      } else if (\n        itemArray[2] !== \"empty\" &&\n        itemArray[2] === itemArray[5] &&\n        itemArray[5] === itemArray[8]\n      ) {\n        setWinMessage(`${itemArray[2]} won`);\n      } else if (\n        itemArray[0] !== \"empty\" &&\n        itemArray[0] === itemArray[4] &&\n        itemArray[4] === itemArray[8]\n      ) {\n        setWinMessage(`${itemArray[0]} won`);\n      } else if (\n        itemArray[2] !== \"empty\" &&\n        itemArray[2] === itemArray[4] &&\n        itemArray[4] === itemArray[6]\n      ) {\n        setWinMessage(`${itemArray[2]} won`);\n      }\n   };\n\n   const changeItems = (itemNumber) => {\n        if(winMessage){\n            return toast(winMessage, {type: \"success\"});\n        }\n\n        if(itemArray[itemNumber]===\"empty\"){\n            itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\n            setIsCross(!isCross)\n        }\n        else{\n            return toast(\"Already Filled\", {type: \"error\"})\n        }\n        checkIsWinners();\n   }\n\n  return (\n    \n      <Container className=\"p-5\">\n        <ToastContainer position=\"bottom-center\"/>\n        <Row className=\"m-4\">\n            <Col md={6} className=\"offset-md-3\">\n                {winMessage ? (\n                    <div className=\"mb-2 mt-2\">\n                        <h1 className=\"text-success text-uppercase text-center m-2\">\n                            {winMessage}\n                        </h1>\n                        <Button color=\"success\" block onClick={reloadGame}>\n                            Reload the Game\n                        </Button>\n                    </div>\n                ) : (\n                    <h1 className=\"text-center text-warning\">\n                        {isCross ? \"Cross\" : \"Circle\"} turns\n                    </h1>\n                )}\n                <div className=\"grid mt-5\">\n\n                    {itemArray.map((item, index) => (\n                        <Card color=\"warning\" onClick={() => changeItems(index)}>\n                            <CardBody className=\"box\">\n                                <Icon name={item}/>\n                            </CardBody>\n                        </Card>\n                    ))}\n                </div>\n            </Col>\n        </Row>\n      </Container>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}